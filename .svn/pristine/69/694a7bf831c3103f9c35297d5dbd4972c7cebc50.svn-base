package com.fullteem.yueba.net.http;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import android.content.Context;
import android.graphics.Bitmap;

import com.alibaba.fastjson.JSONObject;
import com.fullteem.yueba.globle.GlobleConstant;
import com.fullteem.yueba.model.Example;
import com.fullteem.yueba.model.RequestModel;
import com.fullteem.yueba.model.ResponeModel;
import com.fullteem.yueba.net.Urls;
import com.fullteem.yueba.util.DisplayUtils;
import com.fullteem.yueba.util.FileUtils;
import com.fullteem.yueba.util.ImageUtils;
import com.fullteem.yueba.util.LogUtil;

public class HttpRequestFactory {
	private static HttpRequestFactory httpRequestFactory;

	private static AsyncHttpClient asynHttpClient;

	private static CustomAsyncHttpClient cusHttpClient;

	public static HttpRequestFactory getInstance() {
		if (httpRequestFactory == null) {
			httpRequestFactory = new HttpRequestFactory();
			asynHttpClient = new AsyncHttpClient();
			cusHttpClient = new CustomAsyncHttpClient(null);
		}
		return httpRequestFactory;
	}

	/**
	 * 需要显示对话框则调用该方法
	 * 
	 * @param context
	 * @return
	 */
	public static HttpRequestFactory getInstance(Context context) {
		cusHttpClient = new CustomAsyncHttpClient(context);
		if (httpRequestFactory == null) {
			synchronized (HttpRequest.class) {
				if (httpRequestFactory == null) {
					httpRequestFactory = new HttpRequestFactory();
				}
			}
		}
		return httpRequestFactory;
	}

	public void getRequest(String url, JSONObject jsonObj, AsyncHttpResponseHandler asyncHttpResponseHandler) {
		RequestParams requestParams = new RequestParams();
		if (jsonObj != null) {
			requestParams.put("p", jsonObj.toString());
		}
		LogUtil.LogDebug("HttpRequestFactory", url + requestParams.toString(), null);
		asynHttpClient.get(url, requestParams, asyncHttpResponseHandler);
	}

	/**
	 * 上传图片
	 * 
	 * @param http
	 * @param path
	 */
	public void uploadFile(IHttpTaskCallBack http, String path) {
		HttpRequestTask task = new HttpRequestTask(http);
		RequestConfig rc = new RequestConfig();
		rc.setUploadPath(path);
		rc.setPostFlag(GlobleConstant.UPLOAD);
		task.execute(rc);
	}

	public void uploadFile(Context context, File file, final CustomAsyncResponehandler handler) {
		Bitmap bitUploadPic = ImageUtils.getCompressBitmapByFile(file.getAbsolutePath(), DisplayUtils.getScreenWidht(context), DisplayUtils.getScreenHeight(context));
		bitUploadPic = ImageUtils.compressBitmap(bitUploadPic, 100); //图片大于100kb则压缩
		if (bitUploadPic != null) {
			String fileName = java.util.UUID.randomUUID() + file.getName();
			try {
				FileUtils.saveBitmapToPath(bitUploadPic, GlobleConstant.USERPHOTO_DIR, fileName);
			} catch (IOException e1) {
				System.out.println(e1.toString());
				e1.printStackTrace();
			}

			file = new File(GlobleConstant.USERPHOTO_DIR + fileName);
		}
		System.out.println("图片上传的路径:" + file.getAbsolutePath());

		RequestModel requestModel = new RequestModel();
		RequestParams params = new RequestParams();
		try {
			params.put("imgFile", file);
		} catch (FileNotFoundException e) {
			System.out.println(e.toString());
			e.printStackTrace();
		}
		requestModel.setParams(params);
		// 控制回调，部分特殊回调需要重写AsyncHttpResponseHandler对应方法自行处理
		requestModel.setCls(Example.class);
		requestModel.setShowDialog(true);
		requestModel.setShowErrorMessage(true);
		requestModel.setUrl(Urls.uploadMemberImage_action);
		requestModel.setParams(params);
		cusHttpClient.post(requestModel, new CustomAsyncResponehandler() {
			public void onSuccess(ResponeModel baseModel) {
				handler.onSuccess(baseModel);
				LogUtil.LogDebug("HttpRequestFactory", baseModel.getJson(), null);
				// 将返回结果封装在对象中:baseModel.setResult(result)
				// 而后在界面中获取返回结果对象：baseModel.getResult()
				// 复杂的返回结果需要另外做处理
			}

			@Override
			public void onStart() {
			}

			@Override
			public void onFailure(Throwable error, String content) {
			}

			@Override
			public void onFinish() {
			}
		});

	}
}
