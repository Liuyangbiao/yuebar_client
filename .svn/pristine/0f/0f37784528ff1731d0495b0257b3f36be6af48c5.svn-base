package com.fullteem.yueba.app.ui;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.robobinding.ViewBinder;
import org.robobinding.binder.BinderFactory;
import org.robobinding.binder.BinderFactoryBuilder;

import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.fullteem.yueba.R;
import com.fullteem.yueba.app.AppContext;
import com.fullteem.yueba.app.adapter.PerssonalAlbumAdapter;
import com.fullteem.yueba.app.adapter.PerssonalGiftAdapter;
import com.fullteem.yueba.app.adapter.VideoListAdapter;
import com.fullteem.yueba.app.ui.PubDetailsActivity.PubEnvironmentAdapter;
import com.fullteem.yueba.app.ui.fragment.MoodDetailsFragment;
import com.fullteem.yueba.globle.GlobleConstant;
import com.fullteem.yueba.model.GiftModel;
import com.fullteem.yueba.model.MoodModel;
import com.fullteem.yueba.model.ResponeModel;
import com.fullteem.yueba.model.SingerDetailModel;
import com.fullteem.yueba.model.SingerVideoListModel;
import com.fullteem.yueba.model.presentmodel.SingerVideoListPresentModel;
import com.fullteem.yueba.net.http.CustomAsyncResponehandler;
import com.fullteem.yueba.net.http.HttpRequest;
import com.fullteem.yueba.util.DisplayUtils;
import com.fullteem.yueba.util.ImageLoaderUtil;
import com.fullteem.yueba.widget.ChildViewPager;
import com.fullteem.yueba.widget.ExpandListView;
import com.fullteem.yueba.widget.TopTitleView;

/**
 * @author jun
 * @version 1.0.0
 * @created 2014年12月13日&emsp;上午9:54:21
 * @use 歌手视频列表页面
 */
public class SingerVideoListActivity extends BaseActivity {
	private TextView tvUserGender;
	private SingerDetailModel singerModel;
	private SingerVideoListPresentModel presentMode;
	private RelativeLayout rlMood;
	private RecyclerView recyclerviewGift, recyclerview_album;
	private ImageView ivArrowRightGift, ivArrowLeftGift, ivArrowLeftAlbum, ivArrowRightAlbum;
	private ImageView ivLevel;
	private ExpandListView lvVideo;
	private CheckBox ckbHeart;
	private List<GiftModel> listGift;
	private List<SingerVideoListModel> listVideo;
	private List<GiftModel> listAlbumUrl;
	private PerssonalGiftAdapter adapterGift;
	private VideoListAdapter adapterVideoList;
	private PerssonalAlbumAdapter adapterAlbum;
	private MoodDetailsFragment fragmentMood;

	private boolean isBack;
	private ChildViewPager singerViewPager;
	private ArrayList<ImageView> mSingerVideoList;
	private SingerVideoAdapter singerVideoAdapter;

	public SingerVideoListActivity() {
		super(-1);
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		BinderFactory binderFactory = new BinderFactoryBuilder().build();
		ViewBinder vb = binderFactory.createViewBinder(this, true);
		singerModel = new SingerDetailModel();
		presentMode = new SingerVideoListPresentModel(singerModel); // 当前登录用户的信息直接获取实例，其他用户传对应bean
		View rootView = vb.inflateAndBind(R.layout.activity_singer_video_list, presentMode);
		setContentView(rootView);
		super.onCreate(savedInstanceState);
	}

	@Override
	public void initViews() {
		initTopTitle();
		tvUserGender = (TextView) findViewById(R.id.tv_userGender);
//		lvVideo = (ExpandListView) findViewById(R.id.lv_video);
		singerViewPager = (ChildViewPager) findViewById(R.id.cp_singer_video);
		rlMood = (RelativeLayout) findViewById(R.id.rl_mood);
		ivArrowLeftGift = (ImageView) findViewById(R.id.iv_arrowLeftGift);
		ivArrowRightGift = (ImageView) findViewById(R.id.iv_arrowRightGift);
		ivArrowLeftAlbum = (ImageView) findViewById(R.id.iv_arrowLeftAlbum);
		ivArrowRightAlbum = (ImageView) findViewById(R.id.iv_arrowRightAlbum);
		ivLevel = (ImageView) findViewById(R.id.iv_level);
		recyclerviewGift = (RecyclerView) findViewById(R.id.recyclerview_gift);
		recyclerview_album = (RecyclerView) findViewById(R.id.recyclerview_album);

		ckbHeart = (CheckBox) findViewById(R.id.ckbHeart);
	}

	@Override
	public void initData() {
		if (!isBack)
			loadData(getIntent().getIntExtra(GlobleConstant.SINGER_ID, -1));

		LinearLayoutManager[] layoutManager = new LinearLayoutManager[2];
		for (int i = 0; i < layoutManager.length; i++) {
			layoutManager[i] = new LinearLayoutManager(this);
			layoutManager[i].setOrientation(LinearLayoutManager.HORIZONTAL);
		}
		recyclerview_album.setLayoutManager(layoutManager[0]);
		recyclerviewGift.setLayoutManager(layoutManager[1]);

		recyclerview_album.setAdapter(adapterAlbum = adapterAlbum == null ? new PerssonalAlbumAdapter(listAlbumUrl = listAlbumUrl == null ? new LinkedList<GiftModel>()
				: listAlbumUrl) : adapterAlbum);
		recyclerviewGift.setAdapter(adapterGift = adapterGift == null ? new PerssonalGiftAdapter(listGift = listGift == null ? new LinkedList<GiftModel>() : listGift)
				: adapterGift);
//		lvVideo.setAdapter(adapterVideoList = adapterVideoList == null ? new VideoListAdapter(SingerVideoListActivity.this,
//				listVideo = listVideo == null ? new LinkedList<SingerVideoListModel>() : listVideo) : adapterVideoList);

		fragmentMood = fragmentMood == null ? new MoodDetailsFragment() : fragmentMood;

		// --------------------------examples data--------------------------
		//
		// int dataTotal = new Random().nextInt(10);
		//
		// for (int i = 0; i < dataTotal; i++) {
		// listGift.add(new GiftModel("drawable://" + R.drawable.pub_icon, null,
		// i, i, 0, 0));
		// VideoModel videoModel = new VideoModel();
		// videoModel.setVideoIntroduction(getString(R.string.identifying) +
		// "i");
		// listVideo.add(videoModel);
		// }
		// recyclerviewGift.setAdapter(new PerssonalGiftAdapter(listGift));
		// lvVideo.setAdapter(new VideoListAdapter(SingerVideoListActivity.this,
		// listVideo));
		//
		// presentMode.setAlbumNoneVisibility(View.VISIBLE);
		// if (listGift == null || listGift.size() <= 0)
		// presentMode.setGiftVisibility(View.GONE);
		// setShowUserGender(presentMode.getUserGender());
		// --------------------------examples data--------------------------
		/*================================测试数据=========================================*/
		int[] imageResIDs = {
				R.drawable.singer1,
				R.drawable.singer2,
				R.drawable.singer3,
				R.drawable.singer4,
		};
		
		mSingerVideoList = new ArrayList<ImageView>();
		
		ImageView iv;
		
		for (int i = 0; i < imageResIDs.length; i++) {
			iv = new ImageView(this);
			iv.setBackgroundResource(imageResIDs[i]);
			mSingerVideoList.add(iv);
		}
		
		singerVideoAdapter = new SingerVideoAdapter();
		singerViewPager.setAdapter(singerVideoAdapter);
		
		int item = Integer.MAX_VALUE / 2 - ((Integer.MAX_VALUE / 2) % mSingerVideoList.size());
		singerViewPager.setCurrentItem(item);
    	/*================================测试数据=========================================*/
    	
	}
	
	/*================================测试数据=========================================*/
	class SingerVideoAdapter extends PagerAdapter{

		@Override
		public int getCount() {
			return Integer.MAX_VALUE;
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == arg1;
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			container.removeView((View)object);
		}

		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			ImageView iv = mSingerVideoList.get(position % mSingerVideoList.size());
			container.addView(iv);
			return iv;
		}
	}

	@Override
	public void bindViews() {
		rlMood.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (singerModel.getSingerId() == -1) {
					showToast(getString(R.string.hint_singerDataLoading));
					return;
				}
				if (presentMode.getMoodNoneVisibility() == View.VISIBLE) {
					showToast(getString(R.string.hint_noneMood));
					return;
				}

				getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.slide_in_from_left, R.anim.slide_out_to_right)
						.replace(android.R.id.content, fragmentMood).addToBackStack(null).commit();
			}
		});

		ckbHeart.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Integer userId = Integer.valueOf(AppContext.getApplication().getUserInfo().getUserId());
				if (userId == null || userId <= -1)
					return;
				if (singerModel.getSingerId() == -1) {
					ckbHeart.setChecked(!ckbHeart.isChecked());
					showToast("请等待歌手信息加载完成后再试");
					return;
				}
				HttpRequest.getInstance(SingerVideoListActivity.this).operateFollow(2, singerModel.getSingerId(), userId, singerModel.getSingerPhone(),
						AppContext.getApplication().getUserInfo().getUserMobile(), singerModel.isFollow(), new CustomAsyncResponehandler() {

							@Override
							public void onSuccess(ResponeModel baseModel) {
								if (baseModel != null && baseModel.isStatus())
									loadData(singerModel.getSingerId());
								else {
									ckbHeart.setChecked(!ckbHeart.isChecked());
									showToast(getString(R.string.hint_operationError));
								}
							}

							@Override
							public void onFailure(Throwable error, String content) {
								ckbHeart.setChecked(!ckbHeart.isChecked());
								showToast(getString(R.string.hint_operationError));
							}
						});
				//				if (singerModel.isFollow()) {
				//					HttpRequest.getInstance().cancelFollow(singerModel.getSingerId(), userId, new CustomAsyncResponehandler() {
				//
				//						@Override
				//						public void onSuccess(ResponeModel baseModel) {
				//							if (baseModel != null) {
				//								if (!baseModel.isStatus()) {
				//									ckbHeart.setChecked(true);
				//									showToast("取消关注失败！\n" + baseModel.getJson());
				//								}
				//							}
				//						}
				//
				//						@Override
				//						public void onFailure(Throwable error, String content) {
				//							ckbHeart.setChecked(true);
				//							showToast("取消关注失败！\n");
				//						}
				//					});
				//					return;
				//				}
				//				HttpRequest.getInstance(SingerVideoListActivity.this).addFollow(2, singerModel.getSingerId(), userId, new CustomAsyncResponehandler() {
				//
				//					@Override
				//					public void onSuccess(ResponeModel baseModel) {
				//						if (baseModel != null) {
				//							if (!baseModel.isStatus()) {
				//								ckbHeart.setChecked(false);
				//								showToast("关注失败！\n" + baseModel.getJson());
				//							}
				//						}
				//					}
				//
				//					@Override
				//					public void onStart() {
				//						ckbHeart.setChecked(true);
				//					}
				//
				//					@Override
				//					public void onFinish() {
				//
				//					}
				//
				//					@Override
				//					public void onFailure(Throwable error, String content) {
				//						showToast("关注失败！\n");
				//						ckbHeart.setChecked(false);
				//					}
				//				});
			}
		});

	}

	private void setShowUserGender(String userGender) {
		Drawable drawableLeft;
		if ("男".equals(userGender)) {
			drawableLeft = getResources().getDrawable(R.drawable.sex_boy);
			tvUserGender.setEnabled(false);
		} else {
			drawableLeft = getResources().getDrawable(R.drawable.sex_girl);
		}
		drawableLeft.setBounds(0, 0, drawableLeft.getMinimumWidth(), drawableLeft.getMinimumHeight());
		tvUserGender.setCompoundDrawables(drawableLeft, null, null, null);
	}

	private void initTopTitle() {
		TopTitleView topTitle = (TopTitleView) findViewById(R.id.top_title);
		topTitle.showLeftImag(R.drawable.back, new OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		topTitle.showCenterText(getString(R.string.videoList), null);
	}

	/**
	 * 从服务器获取数据
	 */
	private void loadData(int singerId) {
		Integer userId = Integer.valueOf(AppContext.getApplication().getUserInfo().getUserId());
		if (singerId == -1 || userId == null) {
			showToast(getString(R.string.hint_getSingerDetailError));
			finish();
		}

		HttpRequest.getInstance(SingerVideoListActivity.this).getSingerDetait(singerId, userId, new CustomAsyncResponehandler() {
			@Override
			public void onStart() {
			}

			@Override
			public void onSuccess(ResponeModel baseModel) {
				if (baseModel == null || !baseModel.isStatus()) {
					showToast(getString(R.string.hint_getSingerDetailError));
					return;
				}

				// 歌手收到额礼物列表
				List<GiftModel> listResultGift = (List<GiftModel>) baseModel.getListObject("singerGiftList", GiftModel.class);
				if (listResultGift == null || listResultGift.size() <= 0 || listResultGift.get(0) == null)
					presentMode.setGiftVisibility(View.GONE);
				else {
					if (!listGift.isEmpty())
						listGift.clear();
					listGift.addAll(listResultGift);
					adapterGift.notifyDataSetChanged();
				}

				// 歌手视频列表
				List<SingerVideoListModel> listResultVideo = (List<SingerVideoListModel>) baseModel.getListObject("singerVideoList", SingerVideoListModel.class);
				if (listResultVideo == null || listResultVideo.size() <= 0 || listResultVideo.get(0) == null){
//					presentMode.setVideoVisibility(View.GONE);{}
				}
				else {
//					if (!listVideo.isEmpty())
//						listVideo.clear();
//					listVideo.addAll(listResultVideo);
//					adapterVideoList.notifyDataSetChanged();
				}

				// 歌手详情
				singerModel = (SingerDetailModel) baseModel.getObject("singerMap", SingerDetailModel.class);
				if (singerModel != null) {
					setShowUserGender(singerModel.getSingerGender());
					ImageView ivUserHeader = (ImageView) findViewById(R.id.iv_usrHeader);
					ivUserHeader.setBackgroundColor(Color.TRANSPARENT);
					ImageLoaderUtil.getImageLoader().displayImage(
							DisplayUtils.getAbsolutelyUrl(TextUtils.isEmpty(singerModel.getLogoUrl()) ? singerModel.getUserLogoUrl() : singerModel.getLogoUrl()), ivUserHeader,
							ImageLoaderUtil.getOptions());
				}

				//获取关注、魅力值等
				String isFollow = baseModel.getTreeInResult("isAttention");
				Integer total = baseModel.getTreeInResult("total");
				Integer num = baseModel.getTreeInResult("num");
				singerModel.setIsFollow("true".equalsIgnoreCase(isFollow));
				singerModel.setTotal(total == null ? 0 : total);
				singerModel.setNum(num == null ? 0 : num);
				ckbHeart.setChecked(singerModel.isFollow());
				ivLevel.setImageResource(singerModel.getSingerLevel());
				presentMode.setModel(singerModel);
				fragmentMood.setModel(singerModel);

				// 歌手心情记录
				List<MoodModel> listResultMood = (List<MoodModel>) baseModel.getListObject("singerMoodeRecordList", MoodModel.class);
				if (listResultMood == null || listResultMood.size() <= 0 || listResultMood.get(0) == null)
					presentMode.setMoodNoneVisibility(View.VISIBLE);
				else {
					presentMode.setUserMood(listResultMood.get(0).getMoodRecordText());
					ImageView ivMoodHeader = (ImageView) findViewById(R.id.iv_moodHeader);
					ivMoodHeader.setBackgroundColor(Color.TRANSPARENT);
					if (TextUtils.isEmpty(listResultMood.get(0).getMoodRecordImgUrl())) {
						ivMoodHeader.setVisibility(View.GONE);
					} else {
						ivMoodHeader.setVisibility(View.VISIBLE);
						ImageLoaderUtil.getImageLoader().displayImage(
								DisplayUtils.getAbsolutelyUrl(listResultMood.get(0).getMoodRecordImgUrl().contains(",") ? listResultMood.get(0).getMoodRecordImgUrl().split(",")[0]
										: listResultMood.get(0).getMoodRecordImgUrl()), ivMoodHeader,
								ImageLoaderUtil.getOptions(R.drawable.img_loading_default_copy, R.drawable.img_loading_empty_copy, R.drawable.img_loading_fail_copy));
					}
				}

				//  歌手相册
				List<GiftModel> listResultAlbum = (List<GiftModel>) baseModel.getListObject("singerPhototList", GiftModel.class);
				if (listResultAlbum == null || listResultAlbum.size() <= 0 || listResultAlbum.get(0) == null)
					presentMode.setAlbumNoneVisibility(View.VISIBLE);
				else {
					List<GiftModel> listGf = new LinkedList<GiftModel>();
					for (GiftModel giftModel : listResultAlbum) {
						if (giftModel.getGiftLogoUrl() != null && giftModel.getGiftLogoUrl().length() > 0 && giftModel.getGiftLogoUrl().contains(",")) {
							String[] urlsArray = giftModel.getGiftLogoUrl().split(",");
							for (String string : urlsArray) {
								giftModel.setGiftLogoUrl(string);
								listGf.add(giftModel);
							}
						} else
							listGf.add(giftModel);
					}
					if (!listAlbumUrl.isEmpty())
						listAlbumUrl.clear();
					listAlbumUrl.addAll(listGf);
					adapterAlbum.notifyDataSetChanged();
				}

			}

			@Override
			public void onFailure(Throwable error, String content) {
			}

			@Override
			public void onFinish() {
			}
		});
	}

}
