package com.fullteem.yueba.app.ui;

import java.text.DateFormat;

import java.text.SimpleDateFormat;

import android.content.Intent;

import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;

import android.widget.TextView;

import com.fullteem.yueba.R;
import com.fullteem.yueba.app.AppContext;
import com.fullteem.yueba.globle.GlobleConstant;
import com.fullteem.yueba.widget.TopTitleView;

/**
 * @author jun
 * @version 1.0.0
 * @created 2014年12月16日&emsp;上午9:28:04
 * @use 发布约会界面
 */
public class WhistleBlowActivity extends BaseActivity {
	private EditText et_dateSubject;
	private TextView tv_dateTime;
	private CheckBox ckb_payByYou, ckb_payByMe, ckb_payByAA;
	private CheckBox ckb_genderBoy, ckb_genderGirl, ckb_genderOther;
	private EditText et_dateContent;
	private Button btn_dateAddress, btn_dateWine;
	private TextView tv_dateAddress, tv_dateWine;
	private Button btn_surePublish;
	private EventListener mListener;

	private int favoriteId = -1;// target user id

	private final int DATE_TIME_AFTER = 2; // 约会时间在当前时间几小时后

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm");

	public WhistleBlowActivity() {
		super(R.layout.activity_whistle_blow);
	}

	@Override
	public void initViews() {
		initTopTitle();
		et_dateSubject = (EditText) findViewById(R.id.et_dateSubject);
		tv_dateTime = (TextView) findViewById(R.id.tv_dateTime);
		ckb_payByYou = (CheckBox) findViewById(R.id.ckb_payByYou);
		ckb_payByMe = (CheckBox) findViewById(R.id.ckb_payByMe);
		ckb_payByAA = (CheckBox) findViewById(R.id.ckb_payByAA);
		ckb_genderBoy = (CheckBox) findViewById(R.id.ckb_genderBoy);
		ckb_genderGirl = (CheckBox) findViewById(R.id.ckb_genderGirl);
		ckb_genderOther = (CheckBox) findViewById(R.id.ckb_genderOther);
		et_dateContent = (EditText) findViewById(R.id.et_dateContent);
		btn_dateAddress = (Button) findViewById(R.id.btn_dateAddress);
		btn_dateWine = (Button) findViewById(R.id.btn_dateWine);
		tv_dateAddress = (TextView) findViewById(R.id.tv_dateAddress);
		tv_dateWine = (TextView) findViewById(R.id.tv_dateWine);
		btn_surePublish = (Button) findViewById(R.id.btn_surePublish);

		favoriteId = getIntent().getIntExtra(GlobleConstant.DATE_FAVORITE_ID,
				-1);
		System.out.println("favoriteId: " + favoriteId);
		if (favoriteId != -1) {
			findViewById(R.id.llGender).setVisibility(View.GONE);
			findViewById(R.id.llFavorite).setVisibility(View.VISIBLE);
			((TextView) findViewById(R.id.tv_dateFavorite)).setText(getIntent()
					.getStringExtra(GlobleConstant.DATE_FAVORITE_NAME));
		}
	}

	private void initTopTitle() {
		TopTitleView topTitle = (TopTitleView) findViewById(R.id.top_title);
		topTitle.showLeftImag(R.drawable.back, new OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		topTitle.showCenterText(getString(R.string.whistle_blow), null);
	}

	@Override
	public void initData() {
		mListener = new EventListener();
	}

	@Override
	public void bindViews() {
		ckb_genderBoy.setOnTouchListener(mListener);
		ckb_genderGirl.setOnTouchListener(mListener);
		ckb_genderOther.setOnTouchListener(mListener);
		ckb_payByAA.setOnTouchListener(mListener);
		ckb_payByMe.setOnTouchListener(mListener);
		ckb_payByYou.setOnTouchListener(mListener);
		tv_dateTime.setOnClickListener(mListener);
		btn_dateAddress.setOnClickListener(mListener);
		btn_dateWine.setOnClickListener(mListener);
		btn_surePublish.setOnClickListener(mListener);
	}

	private class EventListener implements OnTouchListener, OnClickListener {

		@Override
		public boolean onTouch(View v, MotionEvent event) {
			switch (v.getId()) {
			case R.id.ckb_genderBoy:
				ckb_genderBoy.setChecked(true);
				ckb_genderGirl.setChecked(false);
				ckb_genderOther.setChecked(false);
				break;
			case R.id.ckb_genderGirl:
				ckb_genderBoy.setChecked(false);
				ckb_genderGirl.setChecked(true);
				ckb_genderOther.setChecked(false);
				break;
			case R.id.ckb_genderOther:
				ckb_genderBoy.setChecked(false);
				ckb_genderGirl.setChecked(false);
				ckb_genderOther.setChecked(true);
				break;

			case R.id.ckb_payByAA:
				ckb_payByAA.setChecked(true);
				ckb_payByMe.setChecked(false);
				ckb_payByYou.setChecked(false);
				break;
			case R.id.ckb_payByMe:
				ckb_payByAA.setChecked(false);
				ckb_payByMe.setChecked(true);
				ckb_payByYou.setChecked(false);
				break;
			case R.id.ckb_payByYou:
				ckb_payByAA.setChecked(false);
				ckb_payByMe.setChecked(false);
				ckb_payByYou.setChecked(true);
				break;
			}
			return true;
		}

		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.btn_dateAddress:
				Intent intent = new Intent(WhistleBlowActivity.this,
						SelectNearbyPubActivity.class);
				intent.putExtra(GlobleConstant.ACTION_ADDRESS, true);
				startActivityForResult(intent,
						GlobleConstant.ACTION_ADDRESS_CODE);
				break;

			}
		}

	}

	private void publishDate() {

		Integer userId = Integer.valueOf(AppContext.getApplication()
				.getUserInfo().getUserId());
		if (userId == null || userId < 0) {
			showToast(getString(R.string.hint_longinFirst));
			return;
		}

		Integer favoriteID = favoriteId == -1 ? null : favoriteId;
		Integer userAppointmentType = favoriteID == null ? 2 : 1;

		/*
		 * HttpRequest.getInstance(WhistleBlowActivity.this).datePublish(
		 * userAppointmentType, getUserAppointmentFee(), userAppointmentObj,
		 * favoriteID, et_dateSubject.getText().toString(),
		 * et_dateContent.getText().toString(),
		 * tv_dateTime.getText().toString(), barId, (int) userId, null, new
		 * CustomAsyncResponehandler() {
		 * 
		 * @Override public void onSuccess(ResponeModel baseModel) {
		 * LogUtil.LogDebug(getClass().getName(), baseModel.toString(), null);
		 * if (baseModel != null) { if (baseModel.isStatus()) {
		 * 
		 * finish(); } else {
		 * showToast(getString(R.string.hint_datePublishError) +
		 * baseModel.getResult()); } } }
		 * 
		 * @Override public void onStart() { }
		 * 
		 * @Override public void onFinish() { }
		 * 
		 * @Override public void onFailure(Throwable error, String content) {
		 * showToast(getString(R.string.hint_datePublishError) + content); } });
		 */
	};

}
