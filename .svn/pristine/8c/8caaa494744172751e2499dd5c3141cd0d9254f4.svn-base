package com.fullteem.yueba.app.adapter;

import java.util.List;

import android.content.Context;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.fullteem.yueba.R;
import com.fullteem.yueba.app.AppContext;
import com.fullteem.yueba.app.ui.OrderManageActivity.OrderType;
import com.fullteem.yueba.app.ui.fragment.OrderPayFragment;
import com.fullteem.yueba.engine.pay.PayManager;
import com.fullteem.yueba.model.OrderManageModel;
import com.fullteem.yueba.model.OrderPayModel;
import com.fullteem.yueba.model.presentmodel.OrderPayPresentModel;
import com.fullteem.yueba.util.DisplayUtils;
import com.fullteem.yueba.util.ImageLoaderUtil;
import com.fullteem.yueba.util.LogUtil;

/**
 * @author jun
 * @version 1.0.0
 * @created 2014年12月8日&emsp;上午10:47:12
 * @use 订单管理Adapter
 */
public class OrderManageAdapter extends BaseAdapter {
	private List<OrderManageModel> listOrder;
	private OrderType orderType;
	private Context context;
	private EventListener mListener;
    private BaseAdapter adapter;

	public OrderManageAdapter(Context context, List<OrderManageModel> listOrder, OrderType orderType) {
		this.context = context;
		this.listOrder = listOrder;
		this.orderType = orderType;
        this.adapter = this;
		mListener = new EventListener();
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder mHolder;
		if (convertView == null) {
			mHolder = new ViewHolder();
			convertView = View.inflate(context, R.layout.adapter_ordermanage_elistview, null);
			mHolder.ivOrderHeader = (ImageView) convertView.findViewById(R.id.iv_orderHeader);
			mHolder.tvOrderName = (TextView) convertView.findViewById(R.id.tv_orderName);
			mHolder.tvOrderPrice = (TextView) convertView.findViewById(R.id.tv_orderPrice);
			mHolder.llNonPayment = (LinearLayout) convertView.findViewById(R.id.ll_nonPayment);
			mHolder.llNonConsume = (LinearLayout) convertView.findViewById(R.id.ll_nonConsume);
			mHolder.llConsumed = (LinearLayout) convertView.findViewById(R.id.ll_consumed);
			mHolder.llBackOrder = (LinearLayout) convertView.findViewById(R.id.ll_backOrder);
			mHolder.btnDelete = (Button) convertView.findViewById(R.id.btn_delete);
			mHolder.btnRightAwayPay = (Button) convertView.findViewById(R.id.btn_rightAwayPay);
			mHolder.tvOrderCode = (TextView) convertView.findViewById(R.id.tv_orderCode);
			mHolder.btnRefund = (Button) convertView.findViewById(R.id.btn_refund);
			mHolder.btnTrack = (Button) convertView.findViewById(R.id.btn_track);
			convertView.setTag(mHolder);
		} else
			mHolder = (ViewHolder) convertView.getTag();

        ImageLoaderUtil.getImageLoader().displayImage(
                                                      DisplayUtils.getAbsolutelyUrl(listOrder.get(position).getExt1()), mHolder.ivOrderHeader);
        mHolder.tvOrderName.setText(listOrder.get(position).getProductDescription());
        mHolder.tvOrderPrice.setText(listOrder.get(position).getAmount());
        mHolder.btnDelete.setTag(position);
        mHolder.btnDelete.setOnClickListener(mListener);
        mHolder.btnRightAwayPay.setTag(position);
        mHolder.btnRightAwayPay.setOnClickListener(mListener);
        mHolder.tvOrderCode.setText(listOrder.get(position).getOrderNo());
        mHolder.btnRefund.setTag(position);
        mHolder.btnRefund.setOnClickListener(mListener);
        mHolder.btnTrack.setTag(position);
        mHolder.btnTrack.setOnClickListener(mListener);

		if (orderType == OrderType.NONPAYMENT) {
			mHolder.llNonPayment.setVisibility(View.VISIBLE);
			mHolder.llNonConsume.setVisibility(View.GONE);
			mHolder.llConsumed.setVisibility(View.GONE);
			mHolder.llBackOrder.setVisibility(View.GONE);
		} else if (orderType == OrderType.NONCONSUME) {
			mHolder.llNonPayment.setVisibility(View.GONE);
			mHolder.llNonConsume.setVisibility(View.VISIBLE);
			mHolder.llConsumed.setVisibility(View.GONE);
			mHolder.llBackOrder.setVisibility(View.GONE);
		} else if (orderType == OrderType.CONSUMED) {
			mHolder.llNonPayment.setVisibility(View.GONE);
			mHolder.llNonConsume.setVisibility(View.GONE);
			mHolder.llConsumed.setVisibility(View.VISIBLE);
			mHolder.llBackOrder.setVisibility(View.GONE);
		} else if (orderType == OrderType.BACKORDER) {
			mHolder.llNonPayment.setVisibility(View.GONE);
			mHolder.llNonConsume.setVisibility(View.GONE);
			mHolder.llConsumed.setVisibility(View.GONE);
			mHolder.llBackOrder.setVisibility(View.VISIBLE);
		} else {
			mHolder.llNonPayment.setVisibility(View.GONE);
			mHolder.llNonConsume.setVisibility(View.GONE);
			mHolder.llConsumed.setVisibility(View.GONE);
			mHolder.llBackOrder.setVisibility(View.GONE);
		}
		return convertView;
	}

	@Override
	public int getCount() {
		return listOrder.size();
	}

	@Override
	public Object getItem(int position) {
		return listOrder.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	private class ViewHolder {
		ImageView ivOrderHeader; // 订单头像
		TextView tvOrderName; // 订单名
		TextView tvOrderPrice; // 订单金额
		LinearLayout llNonPayment, llNonConsume, llConsumed, llBackOrder; // 四种不同订单类型

		// 未付款
		Button btnDelete, btnRightAwayPay;

		// 未消费
		TextView tvOrderCode;
		Button btnRefund;

		// 退订单
		Button btnTrack;
	}

    private class EventListener implements OnClickListener {
        @Override
        public void onClick(View v) {
            Toast.makeText(context, "当前位置" + v.getTag(), 1).show();
            int tag = (Integer)v.getTag();
            OrderManageModel orderManageModel = listOrder.get(tag);
            OrderPayModel orderPayModel;
            
            switch (v.getId()){
                case R.id.btn_delete:
                    adapter.notifyDataSetChanged();
                    break;
                    
                    
                case R.id.btn_rightAwayPay:
                    LogUtil.printPayLog("OrderManageAdapter:rightly pay order");
                    orderPayModel = new OrderPayModel(orderManageModel);
                    
                    ((FragmentActivity) context)
                    .getSupportFragmentManager()
                    .beginTransaction()
                    .setCustomAnimations(R.anim.slide_in_from_left,
                                         R.anim.slide_out_to_right)
                    .replace(
                             android.R.id.content,
                             new OrderPayFragment(new OrderPayPresentModel(
                                                                           context, orderPayModel), null))
                    .addToBackStack(null).commit();
                    
                    
                    break;
                    
                case R.id.btn_refund:
                    LogUtil.printPayLog("OrderManageAdapter:start to refund");
                    String userId = AppContext.getApplication().getUserInfo().getUserId();
                    PayManager.refund(userId, orderManageModel.getOrderNo());
                    break;
                    
                case R.id.btn_track: 
                    break;
            }
        }
        
    }
}
